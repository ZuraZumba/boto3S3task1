import boto3
from os import getenv
from dotenv import load_dotenv
import logging
from botocore.exceptions import ClientError
import argparse

load_dotenv()

def init_client():
  try:
    client=boto3.client("s3",
                    aws_access_key_id=getenv("aws_access_key_id"),
                    aws_secret_access_key=getenv("aws_secret_access_key"),
                    aws_session_token=getenv("aws_session_token"),
                     region_name=getenv("aws_region_name")
                       )
    client.list_buckets()
     
    return client
  except ClientError as e:
      logging.error(e)
  except:
      logging.error("Unexpected Error")

def bucket_exists(aws_s3_client, bucket_name):
   try:
      response = aws_s3_client.head_bucket(Bucket=bucket_name)
      print(response)
   except ClientError as e:
      logging.error(e)
      return False
   status_code=response['ResponseMetadata']['HTTPStatusCode']
   if status_code == 200:
      return True
   return True

def delete_bucket(aws_s3_client, bucket_name):
   try:
      aws_s3_client.delete_bucket(Bucket=bucket_name)
      print(f'{bucket_name} deleted from Buckets')
   except ClientError as e:
      logging.error(e)
      return False
   return True

def Main():
    s3_client = init_client()

    parser = argparse.ArgumentParser()
    parser.add_argument('vedro', help="Enter Bucket Name", type=str)
    args=parser.parse_args()
    bn=args.vedro

    if not bucket_exists(s3_client, bn):
       print(f'{args.vedro}  - არ არსებობს')
    else:
       delete_bucket(s3_client, bn)
       print(f'{bn} წაიშალა')

    
if __name__ == "__main__":
   Main()
